// ÂúñÁâá‰ΩøÁî®ÊÉÖÊ≥ÅÂàÜÊûêÂ∑•ÂÖ∑

/**
 * ÂàÜÊûêÂ∞àÊ°à‰∏≠ÁöÑÂúñÁâá‰ΩøÁî®ÊÉÖÊ≥Å
 * @param {Array} projects - Â∞àÊ°àÈô£Âàó
 * @returns {Object} - ÂàÜÊûêÁµêÊûú
 */
export const analyzeImageUsage = (projects) => {
  console.log("üîç ÈñãÂßãÂàÜÊûêÂúñÁâá‰ΩøÁî®ÊÉÖÊ≥Å...");

  const analysis = {
    total: 0,
    uniqueImage2: 0,
    duplicateImage2: 0,
    sameAsMain: 0,
    sameAsImage1: 0,
    details: [],
  };

  projects.forEach((project, projectIndex) => {
    if (!project.items || !Array.isArray(project.items)) return;

    project.items.forEach((item, itemIndex) => {
      if (!item.images || !Array.isArray(item.images)) return;

      analysis.total++;

      const [main, image1, image2] = item.images;

      let image2Status = "unique";
      if (image2 === main) {
        analysis.sameAsMain++;
        image2Status = "same_as_main";
      } else if (image2 === image1) {
        analysis.sameAsImage1++;
        image2Status = "same_as_image1";
      } else {
        analysis.uniqueImage2++;
        image2Status = "unique";
      }

      if (image2Status !== "unique") {
        analysis.duplicateImage2++;
      }

      analysis.details.push({
        project: project.category,
        item: item.title,
        images: {
          main,
          image1,
          image2,
        },
        image2Status,
        isDuplicate: image2Status !== "unique",
      });
    });
  });

  // Ëº∏Âá∫ÂàÜÊûêÁµêÊûú
  console.log("\nüìä ÂúñÁâá‰ΩøÁî®ÂàÜÊûêÁµêÊûú:");
  console.log(`Á∏ΩÈ†ÖÁõÆÊï∏: ${analysis.total}`);
  console.log(
    `ÂúñÁâá‰∫åÁç®Áâπ: ${analysis.uniqueImage2} (${(
      (analysis.uniqueImage2 / analysis.total) *
      100
    ).toFixed(1)}%)`
  );
  console.log(
    `ÂúñÁâá‰∫åÈáçË§á: ${analysis.duplicateImage2} (${(
      (analysis.duplicateImage2 / analysis.total) *
      100
    ).toFixed(1)}%)`
  );
  console.log(`  - Ëàá‰∏ªÂúñÁõ∏Âêå: ${analysis.sameAsMain}`);
  console.log(`  - ËàáÂúñÁâá‰∏ÄÁõ∏Âêå: ${analysis.sameAsImage1}`);

  // È°ØÁ§∫ÈáçË§áÂúñÁâáÁöÑÈ†ÖÁõÆ
  const duplicates = analysis.details.filter((item) => item.isDuplicate);
  if (duplicates.length > 0) {
    console.log("\nüîÑ ÂúñÁâá‰∫åÈáçË§áÁöÑÈ†ÖÁõÆ:");
    duplicates.forEach((item, index) => {
      console.log(`${index + 1}. ${item.project} > ${item.item}`);
      console.log(
        `   ÁãÄÊÖã: ${
          item.image2Status === "same_as_main" ? "Ëàá‰∏ªÂúñÁõ∏Âêå" : "ËàáÂúñÁâá‰∏ÄÁõ∏Âêå"
        }`
      );
    });
  }

  // È°ØÁ§∫Áç®ÁâπÂúñÁâáÁöÑÈ†ÖÁõÆ
  const unique = analysis.details.filter((item) => !item.isDuplicate);
  if (unique.length > 0) {
    console.log("\n‚ú® ÂúñÁâá‰∫åÁç®ÁâπÁöÑÈ†ÖÁõÆ:");
    unique.forEach((item, index) => {
      console.log(`${index + 1}. ${item.project} > ${item.item}`);
    });
  }

  return analysis;
};

/**
 * Ê™¢Ê∏¨ÂúñÁâáÂú® UI ‰∏≠ÁöÑÈ°ØÁ§∫‰ΩçÁΩÆ
 * @returns {Object} - È°ØÁ§∫‰ΩçÁΩÆË™™Êòé
 */
export const getImageDisplayLocations = () => {
  const locations = {
    "images[0]": [
      "ShowPage - Ë©≥Á¥∞È†ÅÈù¢ÁöÑ‰∏ªË¶ÅÂúñÁâá",
      "AdminPage - ÁÆ°ÁêÜÈ†ÅÈù¢ÁöÑÁ∏ÆÂúñÈ†êË¶Ω",
    ],
    "images[1]": [
      "MenuPage - ÈÅ∏ÂñÆÂàóË°®ÁöÑÈ†ÖÁõÆÁ∏ÆÂúñ",
      "Home02 - È¶ñÈ†ÅËº™Êí≠ÁöÑÂç°ÁâáÂúñÁâáÔºàËàáÂúñÁâá‰∫åËº™Êí≠Ôºâ",
    ],
    "images[2]": ["Home02 - È¶ñÈ†ÅËº™Êí≠ÁöÑÂç°ÁâáÂúñÁâáÔºàËàáÂúñÁâá‰∏ÄËº™Êí≠Ôºâ"],
  };

  console.log("\nüìç ÂúñÁâáÂú® UI ‰∏≠ÁöÑ‰ΩøÁî®‰ΩçÁΩÆ:");
  Object.entries(locations).forEach(([imageIndex, usages]) => {
    console.log(`\n${imageIndex}:`);
    usages.forEach((usage) => {
      console.log(`  ‚Ä¢ ${usage}`);
    });
  });

  return locations;
};

/**
 * Âª∫Ë≠∞ÂÑ™ÂåñÊñπÊ°à
 * @param {Object} analysis - ÂàÜÊûêÁµêÊûú
 * @returns {Array} - ÂÑ™ÂåñÂª∫Ë≠∞
 */
export const getOptimizationSuggestions = (analysis) => {
  const suggestions = [];

  if (analysis.duplicateImage2 > analysis.total * 0.5) {
    suggestions.push({
      type: "warning",
      title: "ÂúñÁâá‰∫åÂ§ßÈáèÈáçË§á",
      description: `${analysis.duplicateImage2}/${analysis.total} ÁöÑÈ†ÖÁõÆÂúñÁâá‰∫åÈáçË§á‰ΩøÁî®ÔºåÂª∫Ë≠∞ËÄÉÊÖÆÁßªÈô§ÊàñÊõøÊèõ„ÄÇ`,
      action: "optimize_duplicates",
    });
  }

  if (analysis.sameAsMain > 0) {
    suggestions.push({
      type: "info",
      title: "Ëàá‰∏ªÂúñÈáçË§á",
      description: `${analysis.sameAsMain} ÂÄãÈ†ÖÁõÆÁöÑËÉåÊôØÂúñËàá‰∏ªÂúñÁõ∏ÂêåÔºåÈ¶ñÈ†ÅËº™Êí≠ÊïàÊûú‰∏çÊòéÈ°Ø„ÄÇ`,
      action: "replace_main_duplicates",
    });
  }

  if (analysis.uniqueImage2 === 0) {
    suggestions.push({
      type: "critical",
      title: "Ê≤íÊúâÁç®ÁâπÁöÑËÉåÊôØÂúñ",
      description:
        "ÊâÄÊúâÈ†ÖÁõÆÁöÑÂúñÁâá‰∫åÈÉΩÊòØÈáçË§áÁöÑÔºåÂª∫Ë≠∞ÁßªÈô§ËÉåÊôØÂúñÂäüËÉΩÊàñÊ∑ªÂä†Áç®ÁâπÂúñÁâá„ÄÇ",
      action: "remove_or_add_unique",
    });
  }

  console.log("\nüí° ÂÑ™ÂåñÂª∫Ë≠∞:");
  suggestions.forEach((suggestion, index) => {
    const emoji =
      suggestion.type === "critical"
        ? "üö®"
        : suggestion.type === "warning"
        ? "‚ö†Ô∏è"
        : "‚ÑπÔ∏è";
    console.log(`${emoji} ${index + 1}. ${suggestion.title}`);
    console.log(`   ${suggestion.description}`);
  });

  return suggestions;
};
